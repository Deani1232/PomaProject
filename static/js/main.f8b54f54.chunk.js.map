{"version":3,"sources":["reportWebVitals.js","components/ProjectDisplay.js","components/ProjectsDisplay.js","pages/HomeScreen.js","components/TextField.js","pages/EditProjectScreen.js","pages/ViewProjectScreen.js","containers/PomaApp.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ProjectDisplay","props","className","name","description","manager","members","risks","onClick","selectAndViewProject","selectAndEditProject","deleteProject","ProjectsDisplay","projects","map","project","id","createProject","HomeScreen","createSelectAndEditProject","TextField","label","type","onChange","value","EditProjectScreen","editProjectName","target","editProjectManager","editProjectRisks","editProjectMembers","editProjectDueDate","dueDate","changePage","ViewProjectScreen","PomaApp","state","page","selectedProjectId","pageName","newState","clone","setState","projectId","newId","v4","push","addProject","removeProject","newProjects","filter","console","log","find","projectManager","date","pageToRender","this","prj","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8b54f54.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nconst ProjectDisplay = (props) => {\n    return (\n        <div className={'ProjectDisplayContainer'}>\n            <h3 className={'ProjectDisplayTitleText'}>{props.name}</h3>\n            <hr/>\n            <p>{props.description}</p>\n            <h4>Manager: {props.manager}</h4>\n            <h4>Members: {props.members}</h4>\n            <h4>Risks: {props.risks}</h4>\n            <div>\n                <button className={'ProjectDisplayViewButton'} onClick={props.selectAndViewProject}>View</button>\n                <button className={'ProjectDisplayEditButton'} onClick={props.selectAndEditProject}>Edit</button>\n                <button className={'ProjectDisplayDeleteButton'} onClick={props.deleteProject}>Delete</button>\n            </div>\n        </div>\n    );\n};\n\nexport default ProjectDisplay;","import React from 'react';\nimport ProjectDisplay from \"./ProjectDisplay\";\n\nconst ProjectsDisplay = (props) => {\n    const projects = props.projects.map((project) => {\n        return (\n            <ProjectDisplay\n                deleteProject={() => props.deleteProject(project.id)}\n                name={project.name}\n                id={project.id}\n                members={project.members}\n                risks={project.risks}\n                description={project.description}\n                manager={project.manager}\n                selectAndEditProject={() => props.selectAndEditProject(project.id)}\n                selectAndViewProject={() => props.selectAndViewProject(project.id)}\n            />\n        );\n    });\n\n    return (\n        <div className={'ProjectsDisplay'}>\n            <h1>Projects</h1>\n            {projects}\n            <button className={'AddProjectButton'} onClick={() => props.createProject()}>Add Project</button>\n        </div>\n    );\n};\n\nexport default ProjectsDisplay;","import React from 'react';\nimport ProjectsDisplay from \"../components/ProjectsDisplay\";\n\nconst HomeScreen = (props) => {\n    return (\n        <div>\n            <div className={'navbar'}>\n                <div className={'barTitle'}>\n                    <h1>Intext Project Management</h1>\n                </div>\n            </div>\n            <ProjectsDisplay\n                selectAndEditProject={props.selectAndEditProject}\n                selectAndViewProject={props.selectAndViewProject}\n                createProject={props.createSelectAndEditProject}\n                deleteProject={props.deleteProject}\n                projects={props.projects}\n            />\n        </div>\n    );\n};\n\nexport default HomeScreen;","import React from 'react';\n\nconst TextField = (props) => {\n    return (\n        <div>\n            <h4 className={\"TextLabel\"}>{props.label}</h4>\n            <input\n                type={'text'}\n                onChange={props.onChange}\n                value={props.value}\n            />\n        </div>\n    );\n};\n\nexport default TextField;","import React from 'react';\nimport TextField from \"../components/TextField\";\n\nconst EditProjectScreen = (props) => {\n    return (\n        <div>\n            <h1>Edit Project: {props.project.name}</h1>\n            <TextField\n                label={'Project Name:'}\n                onChange={(value) => props.editProjectName(props.project.id, value.target.value)}\n                value={props.project.name}\n            />\n            <TextField\n                label={'Project Manager:'}\n                onChange={(value) => props.editProjectManager(props.project.id, value.target.value)}\n                value={props.project.manager}\n            />\n            <TextField\n                label={'Project Risks:'}\n                onChange={(value) => props.editProjectRisks(props.project.id, value.target.value)}\n                value={props.project.risks}\n            />\n            <TextField\n                label={'Project Members:'}\n                onChange={(value) => props.editProjectMembers(props.project.id, value.target.value)}\n                value={props.project.members}\n            />\n            <TextField\n                label={'Due Date:'}\n                onChange={(value) => props.editProjectDueDate(props.project.id, value.target.value)}\n                value={props.project.dueDate}\n            />\n            <button onClick={() => props.changePage('view')} className={'SaveButton'}>Save</button>\n        </div>\n    );\n};\n\nexport default EditProjectScreen;","import React from 'react';\n\nconst ViewProjectScreen = (props) => {\n    return (\n        <div>\n            <h1>Project: {props.project.name}</h1>\n            <p>{props.project.description}</p>\n            <h4>Manager: {props.project.manager}</h4>\n            <h4>Members: {props.project.members}</h4>\n            <h4>Risks: {props.project.risks}</h4>\n            <h4>Due Date: {props.project.dueDate}</h4>\n            <h2>Week Stats (Hours spent per task):</h2>\n            <h4>Requirements Analysis: 10</h4>\n            <h4>Designing: 5</h4>\n            <h4>Coding: 15</h4>\n            <h4>Testing: 7</h4>\n            <h4>Project Management: 2</h4>\n            <h4></h4>\n            <button className={'ProjectDisplayEditButton'} onClick={() => props.changePage('edit')}>Edit Project</button>\n            <button className={'ViewProjectsButton'} onClick={() => props.changePage('home')}>View All Projects</button>\n        </div>\n    );\n};\n\nexport default ViewProjectScreen;","import React, {Component} from 'react';\nimport clone from \"just-clone\";\nimport {v4} from \"uuid\";\nimport ReportWebVitals from \"../reportWebVitals\";\nimport HomeScreen from \"../pages/HomeScreen\";\nimport EditProjectScreen from \"../pages/EditProjectScreen\";\nimport ViewProjectScreen from \"../pages/ViewProjectScreen\";\n\n\nclass PomaApp extends Component {\n    state = {\n        page: 'home',\n        selectedProjectId: '',\n        projects: [\n            {\n                id: 'abcdefg',\n                name: 'Billing System',\n                manager: 'Dean',\n                members: 'Dave, Tim',\n                risks: 'Cost overun [high]',\n                dueDate: '12/16/2051',\n                description: 'This is a project description'\n            }\n        ]\n    }\n\n    changePage = (pageName) => {\n        const newState = clone(this.state);\n        newState.page = pageName;\n        this.setState(newState);\n    }\n\n    selectAndEditProject = (projectId) => {\n        this.setState({page: 'edit', selectedProjectId: projectId});\n    }\n\n    selectAndViewProject = (projectId) => {\n        this.setState({page: 'view', selectedProjectId: projectId})\n    }\n\n    createSelectAndEditProject = () => {\n        const newState = clone(this.state);\n        const newId = v4();\n        newState.projects.push({\n            id: newId,\n            name: 'New project',\n            manager: '',\n            members: '',\n            risks: '',\n            description: '',\n            dueDate: ''\n        });\n        newState.selectedProjectId = newId;\n        newState.page = 'edit';\n        this.setState(newState);\n    }\n\n    addProject = (name, members) => {\n        const newState = clone(this.state);\n        newState.projects.push({\n            id: v4(),\n            name: name,\n            members: members\n        })\n        this.setState(newState);\n    }\n\n    removeProject = (id) => {\n        const newState = clone(this.state);\n        const newProjects = newState.projects.filter((project) => {\n            return project.id !== id;\n        })\n        console.log(newProjects);\n        newState.projects = newProjects;\n        this.setState(newState);\n    }\n\n    editProjectName = (id, name) => {\n        const newState = clone(this.state);\n        const project = newState.projects.find((project) => {return project.id === id});\n        if (project) {\n            project.name = name;\n        }\n        console.log(newState);\n        this.setState(newState);\n    }\n\n    editProjectMembers = (id, members) => {\n        const newState = clone(this.state);\n        const project = newState.projects.find((project) => {return project.id === id});\n        if (project) {\n            project.members = members;\n        }\n        this.setState(newState);\n    }\n\n    editProjectManager = (id, projectManager) => {\n        const newState = clone(this.state);\n        const project = newState.projects.find((project) => {return project.id === id});\n        if (project) {\n            project.manager = projectManager;\n        }\n        this.setState(newState);\n    }\n\n    editProjectRisks = (id, risks) => {\n        const newState = clone(this.state);\n        const project = newState.projects.find((project) => {return project.id === id});\n        if (project) {\n            project.risks = risks;\n        }\n        this.setState(newState);\n    }\n\n    editProjectDueDate = (id, date) => {\n        const newState = clone(this.state);\n        const project = newState.projects.find((project) => {return project.id === id});\n        if (project) {\n            project.dueDate = date;\n        }\n        this.setState(newState);\n    }\n\n    render() {\n        let pageToRender;\n        switch (this.state.page) {\n            case 'home':\n                pageToRender = <HomeScreen\n                    createSelectAndEditProject={this.createSelectAndEditProject}\n                    selectAndViewProject={this.selectAndViewProject}\n                    selectAndEditProject={this.selectAndEditProject}\n                    deleteProject={this.removeProject}\n                    projects={this.state.projects}\n                />;\n                break;\n            case 'edit':\n                pageToRender = <EditProjectScreen\n                    changePage={this.changePage}\n                    project={this.state.projects.find((prj) => prj.id === this.state.selectedProjectId)}\n                    editProjectName={this.editProjectName}\n                    editProjectMembers={this.editProjectMembers}\n                    editProjectManager={this.editProjectManager}\n                    editProjectRisks={this.editProjectRisks}\n                    editProjectDueDate={this.editProjectDueDate}\n                />\n                break;\n            case 'view':\n                pageToRender = <ViewProjectScreen\n                    changePage={this.changePage}\n                    project={this.state.projects.find((prj) => prj.id === this.state.selectedProjectId)}\n                />\n                break;\n            default:\n                pageToRender = <HomeScreen\n                    createSelectAndEditProject={this.createSelectAndEditProject}\n                    selectAndViewProject={this.selectAndViewProject}\n                    selectAndEditProject={this.selectAndEditProject}\n                    deleteProject={this.removeProject}\n                    projects={this.state.projects}/>;\n                break;\n        }\n        return (\n            <div>\n                {pageToRender}\n            </div>\n        );\n    }\n};\n\nexport default PomaApp;","import './App.css';\nimport PomaApp from \"./containers/PomaApp\";\n\nfunction App() {\n  return (\n\t<div className=\"App\">\n        <PomaApp/>\n\t</div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}